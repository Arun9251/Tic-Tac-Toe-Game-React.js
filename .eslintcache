[{"C:\\Users\\aruns\\Desktop\\react20\\four-tictactoe\\src\\index.js":"1","C:\\Users\\aruns\\Desktop\\react20\\four-tictactoe\\src\\App.js":"2","C:\\Users\\aruns\\Desktop\\react20\\four-tictactoe\\src\\reportWebVitals.js":"3","C:\\Users\\aruns\\Desktop\\react20\\four-tictactoe\\src\\components\\icon.js":"4"},{"size":500,"mtime":499162500000,"results":"5","hashOfConfig":"6"},{"size":3435,"mtime":1611748680448,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"6"},{"size":379,"mtime":1611693699525,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1ottnwp",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\aruns\\Desktop\\react20\\four-tictactoe\\src\\index.js",[],["21","22"],"C:\\Users\\aruns\\Desktop\\react20\\four-tictactoe\\src\\App.js",["23"],"import React, {useState} from 'react';\nimport logo from './logo.svg';\n\nimport Icon from \"./components/icon\";\n\n// this is react-toastify code\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n// this is reatstrap code \nimport { Card,CardBody,Container,Button,Col,Row } from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill(\"empty\");\n\n\nconst App = () => {\n\nconst[isCross, setIsCross] = useState(false)\nconst[winMessage,setWinMessage] = useState(\"\");\n\nconst reloadGame = () => {\n  setIsCross(false)\n  setWinMessage(\"\")\n  itemArray.fill(\"empty\",0,9);\n};\n\nconst checkIsWinner = () => {\n  if (\n    itemArray[0] === itemArray[1] &&\n    itemArray[0] === itemArray[2] &&\n    itemArray[0] !== \"empty\"\n  ) {\n    setWinMessage(`${itemArray[0]} won`);\n  } else if (\n    itemArray[3] !== \"empty\" &&\n    itemArray[3] === itemArray[4] &&\n    itemArray[4] === itemArray[5]\n  ) {\n    setWinMessage(`${itemArray[3]} won`);\n  } else if (\n    itemArray[6] !== \"empty\" &&\n    itemArray[6] === itemArray[7] &&\n    itemArray[7] === itemArray[8]\n  ) {\n    setWinMessage(`${itemArray[6]} won`);\n  } else if (\n    itemArray[0] !== \"empty\" &&\n    itemArray[0] === itemArray[3] &&\n    itemArray[3] === itemArray[6]\n  ) {\n    setWinMessage(`${itemArray[0]} won`);\n  } else if (\n    itemArray[1] !== \"empty\" &&\n    itemArray[1] === itemArray[4] &&\n    itemArray[4] === itemArray[7]\n  ) {\n    setWinMessage(`${itemArray[1]} won`);\n  } else if (\n    itemArray[2] !== \"empty\" &&\n    itemArray[2] === itemArray[5] &&\n    itemArray[5] === itemArray[8]\n  ) {\n    setWinMessage(`${itemArray[2]} won`);\n  } else if (\n    itemArray[0] !== \"empty\" &&\n    itemArray[0] === itemArray[4] &&\n    itemArray[4] === itemArray[8]\n  ) {\n    setWinMessage(`${itemArray[0]} won`);\n  } else if (\n    itemArray[2] !== \"empty\" &&\n    itemArray[2] === itemArray[4] &&\n    itemArray[4] === itemArray[6]\n  ) {\n    setWinMessage(`${itemArray[2]} won`);\n  }\n};\n\n\nconst changeItem = itemNumber => {\n  if(winMessage){\n    return toast(winMessage,{type:\"success\"});\n  }\n  \n  if (itemArray[itemNumber] === \"empty\") {\n  itemArray[itemNumber] = isCross ? \"cross\": \"circle\";\n  setIsCross(!isCross);\n  }\n  else {\n    return toast(\"already filled\",{type:\"error\"})\n  }\n  \n\n  checkIsWinner();\n\n};\n\n\nreturn (\n  <Container className=\"p-5\">\n    {/* p-5 means padding of 5 all side(latest bootsrap class)  */}\n    <ToastContainer position=\"bottom-center\" />\n    <Row>\n      <Col md={6} className=\"offset-md-3\">\n        {winMessage ? (\n          <div className=\"mb-2 mt-2\">\n            {/* mb = marginbottom,mt = margin top (latest bootsrap class) */}\n            <h1 className=\"text-success text-uppercase text-center\">\n             {winMessage}\n            </h1>\n            <Button color=\"success\" block onClick={reloadGame}>\n              Reload Game\n            </Button>\n          </div>\n        ): (\n          <h1 className=\"text-center text-warning\">\n            {isCross ? \"Cross\" : \"Circle\"} turns\n          </h1>\n        )}\n        <div className=\"grid\">\n          {itemArray.map((item, index) => (\n          <Card color=\"warning\" onClick={() => changeItem(index) }>\n            <CardBody className=\"box\">\n              <Icon name={item} />\n            </CardBody>\n          </Card>\n          ))}\n\n        </div>\n      </Col>\n    </Row>\n  </Container>\n  );\n}\n\nexport default App;\n","C:\\Users\\aruns\\Desktop\\react20\\four-tictactoe\\src\\reportWebVitals.js",[],"C:\\Users\\aruns\\Desktop\\react20\\four-tictactoe\\src\\components\\icon.js",[],["24","25"],{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":2,"column":8,"nodeType":"32","messageId":"33","endLine":2,"endColumn":12},{"ruleId":"26","replacedBy":"34"},{"ruleId":"28","replacedBy":"35"},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["36"],["37"],"no-global-assign","no-unsafe-negation"]